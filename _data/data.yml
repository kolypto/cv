#
# Be aware that even a small syntax error here can lead to failures in output.
#

sidebar:
    about: False # set to False or comment line if you want to remove the "how to use?" in the sidebar
    education: False # set to False if you want education in main section instead of in sidebar

    # Profile information
    name: Mark Vartanyan
    tagline: Back-End Developer and Tech Lead
    avatar: profile.png

    # Sidebar links
    email: kolypto@gmail.com
    phone: ~
    timezone: ~
    citizenship: ~
    website: ~
    linkedin: kolypto
    xing: ~
    github: kolypto
    telegram: kolypto
    gitlab: ~
    bitbucket: ~
    twitter: ~
    stack-overflow: 134904/kolypto
    codewars: ~
    goodreads: ~
    pdf: ~

    languages:
      - idiom: English
        level: Fluent

      - idiom: Russian
        level: Native

    interests:
      - item: Biology
        link:

      - item: Christian Theology
        link:

      - item: Hiking in the Mountains
        link:

      - item: Photography
        link:

career-profile:
    title: Career Profile
    summary: |
      Enthusiastic Python/Go back-end developer and tech lead.

      Pays careful attention to performance, internal beauty, and durability of every component.
      Loves exceptional projects and challenging tasks that serve the greater good.

      Friendly and business-minded. Loves people. Always smiles :)

# For the past 10 years I worked in healthcare, being the principal software engineer, responsible for the major design decisions in the business logic and the data model.
# My primary stack is Python/Postgres/Redis, Flask or FastAPI, GraphQL and async tools.
# I use Go for services that need some more oompf.

# I love people, and communicate well. Eager to participate in product design with the owner.
# Can lead a team. Prefer more code and less Jira :)


education:
    - degree: MSc in Telecommunications
      university: Peoples' Friendship University of Russia
      time: 2008-2011
      details: ~
    - degree: BSc in Applied Mathematics and Computer Science
      university: Peoples' Friendship University of Russia
      time: 2004-2008
      details: ~


experiences:
    - role: Software Developer and Architect
      time: 2013-2022
      company: Dignio
      details: |
        Tech: Python (Flask, FastAPI, GraphQL, SqlAlchemy), Postgres, Redis.

        Dignio provides a remote healthcare solution so that chronic patients can be monitored at home rather than having to stay in hospital.

        Designed the architecture and built an API solution from scratch. It includes an API, a complex security model, flexible query language for the UI, 
        and realtime notifications. Implemented integration with third-party systems. Applied performance optimization and caching techniques.

# Dignio provides a remote healthcare solution that allows chronic patients to be monitored at home rather than having to stay in hospital.
#
# I was responsible for building the solution from scratch: chose the tech stack, designed the data model and the API, implemented a complex security model. A know-how solution is a flexible query language that allows the UI to shape the data returned by the server.
#
# When more people joined in, I assumed the role of tech lead: provided the technical design for new features, broke them up into tasks, reviewed the code. While being a good neighbor to the team, I also tried to improve our documentation, code quality, test coverage, and gently pushed for better solutions when the time allows.
#
# After the solution served the company well for 8 years, I led a team that started an incremental re-build of the solution with a newer async framework and more robust approaches to data processing. The challenge was to establish patterns that other developers will follow, and it is quite a responsibility to know that the things we design today should be good enough to serve the company for years.
#
# Technically speaking: I started a Python/Flask/PostgreSQL application, designed the data model, established patterns for CRUD endpoints, data validation and background jobs with Celery and Redis. The application boasts a custom query language that lets the front-end team decide which fields and edges to include: this was before the GraphQL times.
# Recently, we decided to rebuild the application using Python/GraphQL and some FastAPI: an async web framework that enables real-time operations via websocket. Our goal was to keep the codebase simple, achieve greater performance, and of course be forward-looking: the new platform should be flexible enough to receive new features in the future. It’s also a responsibility to establish patterns and best practices for developers to follow.
#
# Every feature in the project is covered with unit-tests: it’s a part of the code-review pocess we established. The value of unit-tests is to make sure that it works well today, and will keep working as we make changes to the system.
#
# I also authored coding guidelines, best practices, onboarding tutorials, and led some master classes.

    - role: Lead Developer
      time: 2012-2014
      company: AMgrade
      details: |
        Tech: PHP, MySQL, Javascript, Node.js, Python

        Created websites and web services with Drupal 7 CMS and PHP frameworks (Symfony 2). 
        Led a small team of full-stack developers, also being a project manager and a product manager at times.
    
    - role: Full stack developer
      time: 2009-2011
      company: BrandMotiv web studio
      details: |
        Tech: PHP, Javascript.

        Teamed up with a team of sales and designers to create numerous e-commerce websites in PHP using Simpla CMS.
        Created many custom plugins for both the back-end and the front-end.

    - role: Full Cycle Freelance Developer
      time: 2003-2009
      company: Freelance
      details: |
        Tech: PHP, JavaScript, HTML, CSS

        Created numerous web crawlers, parsers and grabbers, and tools for SEO and data mining.
        Data processing and data mining services.
        Built a banner network with view counting and referral payments.


projects:
    title: Projects
    intro: ~
    assignments:
      - title: Dignio Prevent
        link: https://dignio.com/
        tagline: |
            A remote healthcare platform where patients stay at home and take vital signs using wireless devices that transmit them to the back-end application. 
            The application checks whether the measurement is OK, and if not, notifies a nurse.

            The platform also has automatic medication dispensers that serve pre-packaged medication rolls from a pharmacy.

            <p>⚙️Python, Flask, PostgreSQL, Redis, FastAPI, GraphQL (Ariadne), async.

      - title: Serwant
        link: http://serwant.com.ua/
        tagline: |
            A web service that collects data from wireless meters for the water utility company.
            This solution enables engineers to find leaks and fix them in time.

            <p>⚙️Python, FastAPI, PostgreSQL

      - title: MongoSQL (open-source library)
        link: https://github.com/kolypto/py-mongosql
        tagline: |
            Provides a query language for the front-end.
            Through this MongoDB-inspired syntax, the front-end can filter, sort, and paginate results through a standardized set of tools — which is a time-saver because the front-end team does not have to wait on the back-end to support these standard features.

      - title: Matroska Cache (open-source library)
        link: https://github.com/kolypto/py-matroska-cache
        tagline: |
            A hierarchical caching solution with dependency tracking. Sounds complicated, but made simple with this library.

publications: ~
#    title: Open-Source Projects
#    intro: ~
#    papers:
#      - title: Example
#        link: https://example.com
#        authors: Donald E. Knuth
#        conference: Addison-Wesley, 1968


skillsets:
    - title: ~
      details: |
        Primary languages: Python, Go

        Python style: typing, async
        <br>Python frameworks: Flask, FastAPI, GraphQL (Ariadne)
        <br>Python tools: SqlAlchemy, Alembic, pytest

        Secondary tools: Angular, TypeScript, Flutter
        <br>Long ago: Node.js, PHP, C

        <br>Data stores: PostgreSQL, MySQL, Redis, MongoDB (a bit)
        <br>Daily use: Linux, bash/fish, git, Docker, mypy

        DevOps: Terraform, Traefik, GitHub Actions, Docker
    - title: Values
      details: |
        * Creates structured, readable, well-documented code.
        * Cares about performance, optimizes algorithms
        * Pursues solutions with inner beauty
        * Prefers quality over quantity
        * Always writes unit-tests
    - title: Software Architecture
      details: |
        * Designs structured APIs for the long-term
        * Always focuses on performance
        * Unit-test are used to check the integrity of the solution
        * Tries to avoid over-engineering: simple solutions are easier to support
        * Event-Sourcing can be used where necessary
        * Documentation: Vision, Product Requirements Document, Product Design Specification.
    - title: DevOps
      details: |
        * Linux. Fluent with the terminal. Uses Linux daily.
        * Bash scripting, Python scripting for networking and system tasks
        * A bit of Amazon AWS, Kubernetes
    - title: Business Communication
      details: |
        * Able to understand the requirements and suggest a good way to meet them
        * Can outline a project’s features, make estimations on the resources involved
        * Experienced in preparing all the documents, both managerial and technical
        * A team player.
    - title: Personal
      details: |
        * English: Fluent. Is able to understand and use technical language. Prefers to use English at work.
        * Can do research and figure things out. Eager to learn new things.
        * Knows the art of explaining things properly.
        * Friendly, accurate, stress-resistant. Easily fits into a team. Loves people :)
        * Perfectionist.





skills:
    title: Skills &amp; Proficiency

    toolset:
      - name: Python
        level: 100%

      - name: Flask
        level: 90%

      - name: FastAPI
        level: 90%

      - name: GraphQL (Ariadne)
        level: 80%

      - name: PostgreSQL
        level: 75%
      - name: Redis
        level: 80%
      - name: MongoDB
        level: 60%

      - name: Go
        level: 80% 
      - name: Node.js
        level: 60%

      - name: JavaScript
        level: 90%
      - name: TypeScript
        level: 70%
      - name: Angular
        level: 80%

      - name: C/Linux
        level: 40%
      - name: PHP
        level: 30%

footer: ~
